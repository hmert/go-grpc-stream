// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: inventory.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InventoryMonitorClient is the client API for InventoryMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryMonitorClient interface {
	Status(ctx context.Context, in *InventoryRequest, opts ...grpc.CallOption) (InventoryMonitor_StatusClient, error)
}

type inventoryMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryMonitorClient(cc grpc.ClientConnInterface) InventoryMonitorClient {
	return &inventoryMonitorClient{cc}
}

func (c *inventoryMonitorClient) Status(ctx context.Context, in *InventoryRequest, opts ...grpc.CallOption) (InventoryMonitor_StatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &InventoryMonitor_ServiceDesc.Streams[0], "/main.InventoryMonitor/Status", opts...)
	if err != nil {
		return nil, err
	}
	x := &inventoryMonitorStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InventoryMonitor_StatusClient interface {
	Recv() (*Inventory, error)
	grpc.ClientStream
}

type inventoryMonitorStatusClient struct {
	grpc.ClientStream
}

func (x *inventoryMonitorStatusClient) Recv() (*Inventory, error) {
	m := new(Inventory)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InventoryMonitorServer is the server API for InventoryMonitor service.
// All implementations must embed UnimplementedInventoryMonitorServer
// for forward compatibility
type InventoryMonitorServer interface {
	Status(*InventoryRequest, InventoryMonitor_StatusServer) error
	mustEmbedUnimplementedInventoryMonitorServer()
}

// UnimplementedInventoryMonitorServer must be embedded to have forward compatible implementations.
type UnimplementedInventoryMonitorServer struct {
}

func (UnimplementedInventoryMonitorServer) Status(*InventoryRequest, InventoryMonitor_StatusServer) error {
	return status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedInventoryMonitorServer) mustEmbedUnimplementedInventoryMonitorServer() {}

// UnsafeInventoryMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryMonitorServer will
// result in compilation errors.
type UnsafeInventoryMonitorServer interface {
	mustEmbedUnimplementedInventoryMonitorServer()
}

func RegisterInventoryMonitorServer(s grpc.ServiceRegistrar, srv InventoryMonitorServer) {
	s.RegisterService(&InventoryMonitor_ServiceDesc, srv)
}

func _InventoryMonitor_Status_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InventoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryMonitorServer).Status(m, &inventoryMonitorStatusServer{stream})
}

type InventoryMonitor_StatusServer interface {
	Send(*Inventory) error
	grpc.ServerStream
}

type inventoryMonitorStatusServer struct {
	grpc.ServerStream
}

func (x *inventoryMonitorStatusServer) Send(m *Inventory) error {
	return x.ServerStream.SendMsg(m)
}

// InventoryMonitor_ServiceDesc is the grpc.ServiceDesc for InventoryMonitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryMonitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.InventoryMonitor",
	HandlerType: (*InventoryMonitorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Status",
			Handler:       _InventoryMonitor_Status_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "inventory.proto",
}
